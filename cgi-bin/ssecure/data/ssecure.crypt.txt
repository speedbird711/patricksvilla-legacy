Id	Description	EncryptCode	DecryptCode	AttachmentExtention
NONE	No Encryption	$encryptedText = $plainText;	$plainText = $encryptedText;	
NONE_ATT	No Encryption (Attachment)	$encryptedText = $plainText;	$plainText = $encryptedText;	txt
JMH	JMH Encrypted	use verysimple::Crypt::JMH;<CR><LF>my $objJMH = new verysimple::Crypt::JMH;<CR><LF>$encryptedText = $objJMH->Span($objJMH->Encrypt($recipientsDB->FieldValue("EncryptKey"), $plainText),65);	use verysimple::Crypt::JMH;<CR><LF>my $objJMH = new verysimple::Crypt::JMH;<CR><LF>$plainText = $objJMH->Decrypt($recipientsDB->FieldValue("EncryptKey"), $encryptedText);	
JMH_WEB	JMH Encrypted HTML Web Form	use verysimple::Crypt::JMH;<CR><LF>my $objJMH = new verysimple::Crypt::JMH;<CR><LF>$encryptedText = $objJMH->Span($objJMH->Encrypt($recipientsDB->FieldValue("EncryptKey"), $plainText),65);<CR><LF>$encryptedText = "<html>\n<form action='".$CONFIG->GetValue("JMH_Service_URL")."' method='post'><textarea name='encrypted' rows='10' cols='70'>$encryptedText</textarea><p><input type='submit' value='Decrypt using JMS Web Service'></form></html>\n";	use verysimple::Crypt::JMH;<CR><LF>my $objJMH = new verysimple::Crypt::JMH;<CR><LF>$plainText = $objJMH->Decrypt($recipientsDB->FieldValue("EncryptKey"), $encryptedText);	
RC4	RC4 Encrypted (Attachment)	use Crypt::RC4;<CR><LF>$encryptedText = RC4($recipientsDB->FieldValue("EncryptKey"), $plainText);	use Crypt::RC4;<CR><LF>$plainText = RC4($recipientsDB->FieldValue("EncryptKey"), $encryptedText);	RC4
RC4_BASE64	RC4 Encrypted, BASE64 Encoded	use Crypt::RC4;<CR><LF>use MIME::Base64;<CR><LF>$encryptedText = MIME::Base64::encode(RC4($recipientsDB->FieldValue("EncryptKey"), $plainText),"");	use Crypt::RC4;<CR><LF>use MIME::Base64;<CR><LF>$plainText = RC4($recipientsDB->FieldValue("EncryptKey"), MIME::Base64::decode($encryptedText,""));	
BASE64	BASE64 Encoded	use MIME::Base64;<CR><LF>$encryptedText = MIME::Base64::encode($plainText,"");	use MIME::Base64;<CR><LF>$plainText = MIME::Base64::decode($encryptedText,"");	
PGP	PGP Encrypted	use Crypt::PGPSimple;<CR><LF>my $objPGP = new Crypt::PGPSimple;$objPGP->PgpExePath($CONFIG->GetValue("PGP_Executable_Path"));<CR><LF>$objPGP->PgpKeyPath(($ENV{"CWD"} . $CONFIG->GetValue("PGP_Keyring_Path")));<CR><LF>$objPGP->PgpTempDir($ENV{'CWD'} . $CONFIG->GetValue("Temp_Directory"));<CR><LF>$objPGP->PublicKey($recipientsDB->FieldValue("EncryptKey"));<CR><LF>$objPGP->PlainText($plainText);<CR><LF>$objPGP->Encrypt;<CR><LF>$encryptedText = $objPGP->EncryptedText || $objPGP->Result;	$encryptedText = "PGP decryption is not implemented.";	
GPG	GNU PGP Encrypted	use Crypt::PGPSimple;<CR><LF>my $objPGP = new Crypt::PGPSimple;$objPGP->PgpExePath($CONFIG->GetValue("GPG_Executable_Path"));<CR><LF>$objPGP->PgpKeyPath(($ENV{"CWD"} . $CONFIG->GetValue("GPG_Keyring_Path")));<CR><LF>$objPGP->PgpTempDir($ENV{'CWD'} . $CONFIG->GetValue("Temp_Directory"));<CR><LF>$objPGP->PublicKey($recipientsDB->FieldValue("EncryptKey"));<CR><LF>$objPGP->PlainText($plainText);<CR><LF>$objPGP->Encrypt("--batch --quiet --output - --encrypt --textmode --armor --always-trust --compress-algo 1 --cipher-algo cast5 --no-secmem-warning --homedir " . ($ENV{"CWD"} . $CONFIG->GetValue("GPG_Keyring_Path")) . " --default-recipient");<CR><LF>$encryptedText = $objPGP->EncryptedText || $objPGP->Result;	$encryptedText = "GPG decryption is not implemented.";	
GPG_ATT	GNU PGP Encrypted (Attachment)	use Crypt::PGPSimple;<CR><LF>my $objPGP = new Crypt::PGPSimple;$objPGP->PgpExePath($CONFIG->GetValue("GPG_Executable_Path"));<CR><LF>$objPGP->PgpKeyPath(($ENV{"CWD"} . $CONFIG->GetValue("GPG_Keyring_Path")));<CR><LF>$objPGP->PgpTempDir($ENV{'CWD'} . $CONFIG->GetValue("Temp_Directory"));<CR><LF>$objPGP->PublicKey($recipientsDB->FieldValue("EncryptKey"));<CR><LF>$objPGP->PlainText($plainText);<CR><LF>$objPGP->Encrypt("--batch --quiet --output - --encrypt --textmode --armor --always-trust --compress-algo 1 --cipher-algo cast5 --no-secmem-warning --homedir " . ($ENV{"CWD"} . $CONFIG->GetValue("GPG_Keyring_Path")) . " --default-recipient");<CR><LF>$encryptedText = $objPGP->EncryptedText || $objPGP->Result;	$encryptedText = "GPG decryption is not implemented.";	txt.gpg
PGP_TEST	PGP Test (For Debugging)	use Crypt::PGPSimple;<CR><LF>my $objPGP = new Crypt::PGPSimple;$objPGP->PgpExePath($CONFIG->GetValue("PGP_Executable_Path"));<CR><LF>$objPGP->PgpKeyPath(($ENV{"CWD"} . $CONFIG->GetValue("PGP_Keyring_Path")));<CR><LF>$objPGP->PgpTempDir($ENV{'CWD'} . $CONFIG->GetValue("Temp_Directory"));<CR><LF>return $objPGP->KeyCheck;	return "PGPTest decryption is not implemented.";	
